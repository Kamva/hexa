package {{.Package}}

{{- if .Interface.Doc }}
// {{ .Interface.Doc -}}
{{- end}}
type {{.Name}} struct {
    app App
}

{{ range $index, $element := .Interface.Methods -}}
   {{- if .Doc}}
    // {{ .Doc -}}
   {{- end}}
    func (a *{{$.Name}}) {{$index}}({{$element.Params | joinParamsWithType}}) {{joinResultsForSignature $element.Results}} {
    {{- if $element.Results | len | eq 0}}
        a.app.{{$index}}({{$element.Params | joinParams}})
    {{else}}
        {{$element.Results | genResultsVars}} := a.app.{{$index}}({{$element.Params | joinParams}})
        {{if $element.Results | hasErrInResults}}
            if {{$element.Results | errResultVar}} != nil {
            // do something when error occured.
            }
        {{end}}

         {{if hasAnnotation $element.Annotations "trace"}}
           // Do something, this method has "trace" annotation
        {{end}}

        return {{$element.Results | genResultsVars }}
    {{end}}
    }

{{end -}}

func New{{.Name | title}}(app App) App {
    return &{{.Name}}{
    app: app,
    }
}
