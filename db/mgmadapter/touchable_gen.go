package mgmadapter

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TimeTouchable) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CreatedAt":
			z.CreatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "UpdatedAt":
			z.UpdatedAt, err = dc.ReadTime()
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TimeTouchable) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "CreatedAt"
	err = en.Append(0x82, 0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "CreatedAt")
		return
	}
	// write "UpdatedAt"
	err = en.Append(0xa9, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.UpdatedAt)
	if err != nil {
		err = msgp.WrapError(err, "UpdatedAt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TimeTouchable) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "CreatedAt"
	o = append(o, 0x82, 0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.CreatedAt)
	// string "UpdatedAt"
	o = append(o, 0xa9, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.UpdatedAt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TimeTouchable) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "CreatedAt":
			z.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CreatedAt")
				return
			}
		case "UpdatedAt":
			z.UpdatedAt, bts, err = msgp.ReadTimeBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UpdatedAt")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TimeTouchable) Msgsize() (s int) {
	s = 1 + 10 + msgp.TimeSize + 10 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Touchable) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "VersionTouchable":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "VersionTouchable")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "VersionTouchable")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Version":
					z.VersionTouchable.Version, err = dc.ReadInt64()
					if err != nil {
						err = msgp.WrapError(err, "VersionTouchable", "Version")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "VersionTouchable")
						return
					}
				}
			}
		case "TimeTouchable":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "TimeTouchable")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "TimeTouchable")
					return
				}
				switch msgp.UnsafeString(field) {
				case "CreatedAt":
					z.TimeTouchable.CreatedAt, err = dc.ReadTime()
					if err != nil {
						err = msgp.WrapError(err, "TimeTouchable", "CreatedAt")
						return
					}
				case "UpdatedAt":
					z.TimeTouchable.UpdatedAt, err = dc.ReadTime()
					if err != nil {
						err = msgp.WrapError(err, "TimeTouchable", "UpdatedAt")
						return
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "TimeTouchable")
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Touchable) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "VersionTouchable"
	err = en.Append(0x82, 0xb0, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	// map header, size 1
	// write "Version"
	err = en.Append(0x81, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.VersionTouchable.Version)
	if err != nil {
		err = msgp.WrapError(err, "VersionTouchable", "Version")
		return
	}
	// write "TimeTouchable"
	err = en.Append(0xad, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	// map header, size 2
	// write "CreatedAt"
	err = en.Append(0x82, 0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.TimeTouchable.CreatedAt)
	if err != nil {
		err = msgp.WrapError(err, "TimeTouchable", "CreatedAt")
		return
	}
	// write "UpdatedAt"
	err = en.Append(0xa9, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteTime(z.TimeTouchable.UpdatedAt)
	if err != nil {
		err = msgp.WrapError(err, "TimeTouchable", "UpdatedAt")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Touchable) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "VersionTouchable"
	o = append(o, 0x82, 0xb0, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65)
	// map header, size 1
	// string "Version"
	o = append(o, 0x81, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt64(o, z.VersionTouchable.Version)
	// string "TimeTouchable"
	o = append(o, 0xad, 0x54, 0x69, 0x6d, 0x65, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65)
	// map header, size 2
	// string "CreatedAt"
	o = append(o, 0x82, 0xa9, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.TimeTouchable.CreatedAt)
	// string "UpdatedAt"
	o = append(o, 0xa9, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendTime(o, z.TimeTouchable.UpdatedAt)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Touchable) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "VersionTouchable":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "VersionTouchable")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "VersionTouchable")
					return
				}
				switch msgp.UnsafeString(field) {
				case "Version":
					z.VersionTouchable.Version, bts, err = msgp.ReadInt64Bytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "VersionTouchable", "Version")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "VersionTouchable")
						return
					}
				}
			}
		case "TimeTouchable":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TimeTouchable")
				return
			}
			for zb0003 > 0 {
				zb0003--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "TimeTouchable")
					return
				}
				switch msgp.UnsafeString(field) {
				case "CreatedAt":
					z.TimeTouchable.CreatedAt, bts, err = msgp.ReadTimeBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TimeTouchable", "CreatedAt")
						return
					}
				case "UpdatedAt":
					z.TimeTouchable.UpdatedAt, bts, err = msgp.ReadTimeBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TimeTouchable", "UpdatedAt")
						return
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "TimeTouchable")
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Touchable) Msgsize() (s int) {
	s = 1 + 17 + 1 + 8 + msgp.Int64Size + 14 + 1 + 10 + msgp.TimeSize + 10 + msgp.TimeSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *VersionTouchable) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z VersionTouchable) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "Version"
	err = en.Append(0x81, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z VersionTouchable) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "Version"
	o = append(o, 0x81, 0xa7, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt64(o, z.Version)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *VersionTouchable) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Version":
			z.Version, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z VersionTouchable) Msgsize() (s int) {
	s = 1 + 8 + msgp.Int64Size
	return
}
