package mgmadapter

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Entity) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IDField":
			err = z.IDField.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "IDField")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Entity) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "IDField"
	err = en.Append(0x81, 0xa7, 0x49, 0x44, 0x46, 0x69, 0x65, 0x6c, 0x64)
	if err != nil {
		return
	}
	err = z.IDField.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "IDField")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Entity) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "IDField"
	o = append(o, 0x81, 0xa7, 0x49, 0x44, 0x46, 0x69, 0x65, 0x6c, 0x64)
	o, err = z.IDField.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "IDField")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Entity) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IDField":
			bts, err = z.IDField.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "IDField")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Entity) Msgsize() (s int) {
	s = 1 + 8 + z.IDField.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TouchableEntity) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IDField":
			err = z.IDField.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "IDField")
				return
			}
		case "Touchable":
			err = z.Touchable.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Touchable")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TouchableEntity) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "IDField"
	err = en.Append(0x82, 0xa7, 0x49, 0x44, 0x46, 0x69, 0x65, 0x6c, 0x64)
	if err != nil {
		return
	}
	err = z.IDField.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "IDField")
		return
	}
	// write "Touchable"
	err = en.Append(0xa9, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65)
	if err != nil {
		return
	}
	err = z.Touchable.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Touchable")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TouchableEntity) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "IDField"
	o = append(o, 0x82, 0xa7, 0x49, 0x44, 0x46, 0x69, 0x65, 0x6c, 0x64)
	o, err = z.IDField.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "IDField")
		return
	}
	// string "Touchable"
	o = append(o, 0xa9, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65)
	o, err = z.Touchable.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Touchable")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TouchableEntity) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "IDField":
			bts, err = z.IDField.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "IDField")
				return
			}
		case "Touchable":
			bts, err = z.Touchable.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Touchable")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TouchableEntity) Msgsize() (s int) {
	s = 1 + 8 + z.IDField.Msgsize() + 10 + z.Touchable.Msgsize()
	return
}
